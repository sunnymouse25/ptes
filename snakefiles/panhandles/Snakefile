configfile: "config.yaml"

rule all:
    input:
        expand("histograms_{method}.png", method=config["methods"]), 
        expand("backwards/histograms_{method}.png", method=config["methods"]),       


rule filter_circles:
    input:
        mate1 = expand("{folder}/{sample}/mate1_Chimeric.out.junction", folder=config["star_out_folder"], sample=config["samples"]["plus"]),
        mate2 = expand("{folder}/{sample}/mate2_Chimeric.out.junction", folder=config["star_out_folder"], sample=config["samples"]["plus"]),
    output:
        config["filtered_circles"],
    shell:
        "cat {input.mate1}  {input.mate2} | awk '$1 ==$4 && $3 ==$6 && $7 == 1 ' | sort | uniq > {output}"


rule chim_to_bed:
    input:
        input = config["filtered_circles"],
    output:
        "bed/all_Chimeric.single.bed.sorted",
    conda:
        config["env"]
    shell:
        "ptes.star_chim_to_bed -i {input.input} -o ./ -s 1 -t all_Chimeric"


rule genes_to_bed:
    input:        
        annot = config["annot"],        
    output:
        genes_coding = "bed/genes_coding.gtf",
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    shell:
        """cat {input.annot} | """
        """awk '$3 == "gene"'| """
        """awk -F ';' '$3 ~ /"protein_coding"/ && $7 ~ /"KNOWN"/' > {output.genes_coding}; """
        """bedtools intersect -a {output.genes_coding} -b {output.genes_coding} -c -s  | """
        """awk -F'\t' '$10 == 1' | """
        """awk -F'[\t;]' '{{print $1,"\011",$4,"\011",$5,"\011",$13,"\011","0","\011",$7}}' | """
        """awk -F'[ \t]+' '{{OFS = "\t" }};{{print $1,$2,$3,$5,$6,$7}}' | """
        """tr -d '"'  > {output.genes}"""
        

rule circles_in_genes:
    input:
        circles = "bed/all_Chimeric.single.bed.sorted",
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    output:
        "bed/all_Chimeric_in_genes.bed"    
    shell:
        "cat {input.circles} | awk '$3-$2 <= 100000' | "
        "bedtools intersect -a - -b {input.genes} -s -wa > {output}"


rule circles_with_genes:
    input:
        in_genes = "bed/all_Chimeric_in_genes.bed",
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    output:
        "bed/all_Chimeric_with_genes.bed"    
    shell:        
        "bedtools intersect -a {input.in_genes} -b {input.genes} -s -wo > {output}"


rule panhandles_in_genes:
    input:
        panhandles = config["panhandles"],
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    output:
        "bed/panhandles_in_genes.bed"    
    shell:        
        "bedtools intersect -a {input.panhandles} -b {input.genes} -s -wa > {output}"


rule panhandles_with_genes:
    input:
        panhandles = config["panhandles"],
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    output:
        "bed/panhandles_with_genes.bed"    
    shell:        
        "bedtools intersect -a {input.panhandles} -b {input.genes} -s -wo > {output}"


rule circles_with_panhandles:
    input:
        a_file = "bed/all_Chimeric_in_genes.bed",    
        b_file = "bed/panhandles_in_genes.bed"
    output:
        "bed/all_Chimeric_panhandles.bed"    
    shell:
        "bedtools intersect -a {input.a_file} -b {input.b_file} -s -wo > {output}"


rule panhandles_with_circles:
    input:
        b_file = "bed/all_Chimeric_in_genes.bed",    
        a_file = "bed/panhandles_in_genes.bed"
    output:
        "bed/panhandles_all_Chimeric.bed"    
    shell:
        "bedtools intersect -a {input.a_file} -b {input.b_file} -s -wo > {output}"


rule random_shuffle:
    input:
        features = config["panhandles"],
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    output:
        temp(directory("random")),
    params: 
        folder = ".", 
        iter = config["iterations"],
        methods = config["methods"],
        closest = config["closest"],
        chrom_sizes = config["chrom_sizes"],        
    conda:
        config["env"]
    shell:
        "ptes.random_shuffle -m {params.methods} -c {params.closest} -f {input.features} -g {input.genes} "
        " -iter {params.iter} -o {params.folder} -s {params.chrom_sizes} "


rule bed_to_overlaps:
    input:
        input = "bed/all_Chimeric_panhandles.bed",                
        random_dir = directory("random"),
        circles = "bed/all_Chimeric.single.bed.sorted",
    output:
        expand("histograms_{method}.png", method=config["methods"]),       
    params: 
        folder = ".", 
        iter = config["iterations"],
        methods = config["methods"],        
    conda:
        config["env"]
    shell:
        "ptes.bed_to_overlaps -m {params.methods} -i {input.input} -f {input.circles}"
        "-iter {params.iter} -o {params.folder} -a circles -b panhandles "


rule random_shuffle_backwards:
    input:
        features = "bed/all_Chimeric.single.bed.sorted",
        genes = "bed/hg19_genes_coding_no_overlap.bed",
    output:
        temp(directory("backwards/random")),
    params: 
        folder = "backwards", 
        iter = config["iterations"],
        methods = config["methods"],
        closest = config["closest"],
        chrom_sizes = config["chrom_sizes"],        
    conda:
        config["env"]
    shell:
        "ptes.random_shuffle -m {params.methods} -c {params.closest} -f {input.features} -g {input.genes} "
        " -iter {params.iter} -o {params.folder} -s {params.chrom_sizes} "


rule bed_to_overlaps_backwards:
    input:
        input = "bed/panhandles_all_Chimeric.bed" ,        
        random_dir = directory("backwards/random"),
        panhandles = config["panhandles"],
    output:
        expand("backwards/histograms_{method}.png", method=config["methods"]),       
    params: 
        folder = "backwards", 
        iter = config["iterations"],
        methods = config["methods"],        
    conda:
        config["env"]
    shell:
        "ptes.bed_to_overlaps -m {params.methods} -i {input.input} -f {input.panhandles}"
        "-iter {params.iter} -o {params.folder} -a panhandles  -b circles"


